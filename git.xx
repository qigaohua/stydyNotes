>>>>>
分支


查看分支：
git branch -vv

创建分支：
git branch 名字

检出（切换）到其他分支：
git checkout test
在没有创建test分支时，我们可以使用"git checkout –b test"命令同时完成创建test分支并检出test分支的操作。



分离头:
"通常情况下"，HEAD总是指向当前所在的分支（即指向当前分支的分支指针）
"不是那么通常的情况", HEAD指针没有指向分支指针，而是直接指向了某个提交,称之为"分离头"（detached HEAD）。
我们直接在git checkout命令后面指定某个提交的哈希码，即可进入到分离头的状态。


分离头状态的使用场景:
git建议我们，在分离头的状态下，我们可以随便看看，可以按照我们的想法，对当前目录中的文件进行一些实验性的修改，
并且将这些实验性的修改创建成一些提交（其实这些提交会组成一条匿名分支），如果你最后后悔了，觉得实验不成功，修
改后的结果并不是你想要的，那么我们可以在不影响任何其他分支和提交的情况下，丢弃这些实验性的提交（丢弃这条匿名
分支），如果你觉得这些实验性的提交让你很满意，那么你就可以创建一个新的分支（其实是给这个匿名分支一个固定的名
字），来永久性的保存这些提交。
选择放弃这个匿名分支, 你可以直接检出到任何一个别的分支，就相当于放弃了这些提交。
选择保存这个匿名分支，给这个匿名分支一个固定的名字：git checkout -b 名字。
<<<<<


>>>>>
比较差异



工作区和暂存区:

是否存在差异：
git diff
查看某个特定文件在这两个区域的差异:
git diff -- 文件名 ('--'后面可以跟随多个文件路径，每个文件路径用空格隔开)


工作区和最新提交：

使用"git diff HEAD"命令即可查看工作区与当前分支最新的提交之间的差异.


暂存区和最新提交:

使用"git diff --cached"命令即可查看暂存区与当前分支最新的提交之间的差异


两个提交区之间:

使用git log --oneline 得到哈希码，”git diff 哈希玛1 哈希玛2“  比较差异
或 使用git diff HEAD~ HEAD （"HEAD"代表最新的提交，上述命令中的"HEAD~"代表最新提交的前一个提交）


两个分支上最新提交之间:
git diff branch1 branch2


<<<<<







